/***********************************************************************

                    消息包队列
//此模块负责消息包队列的入队与出队管理
***********************************************************************/
#ifndef __NET_FUN_MNG_H
#define	__NET_FUN_MNG_H

/***********************************************************************
		                        相关结构
***********************************************************************/
#include "SoftQ.h"
#include "MsgPacket.h"

struct _MsgPacketQ{
  //功能编码相关:
  struct _SoftQ *pMsgQ;     //接收消息的软件队列, 队列长度>=3(3为仅写一个数据时)
  struct _MsgPacket RdMsg;  //缓冲最后一次收到的消息
  unsigned char RetryIndex; //数据未成功时，重试次数
};

/***********************************************************************
		                       相关函数
***********************************************************************/

//--------------------------初始化---------------------------------
void MsgPacketQ_Init(struct _MsgPacketQ *pMng, //未实始化的结构
                    unsigned char MsgQLen);  //消息队列长度

//--------------------------消息入队---------------------------------
void MsgPacketQ_Push(const struct _MsgPacketQ *pMng,
                     const struct _MsgPacket *pMsg);

//--------------------------消息出队---------------------------------
//返回NULL无消息，否则返回收到的消息
struct _MsgPacket *MsgPacketQ_Pop(struct _MsgPacketQ *pMng);

//--------------------------得到最后缓冲的消息-------------------------
//需注意检查消息有效性
#define MsgPacketQ_GetLast(pmng) (&(pmng)->RdMsg)

    
#endif
